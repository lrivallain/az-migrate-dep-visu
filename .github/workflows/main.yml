name: Python application

on:
- push
- pull_request

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-flask

    - name: Run tests
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Verify tag matches version
        run: |
          PACKAGE_VERSION=$(python setup.py --version)
          GIT_TAG=${GITHUB_REF#refs/tags/}
          if [ "v$PACKAGE_VERSION" != "$GIT_TAG" ]; then
            echo "Package version ($PACKAGE_VERSION) does not match git tag ($GIT_TAG)"
            exit 1
          fi

      - name: Build package
        run: |
          python setup.py sdist bdist_wheel

      - name: Publish package
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload dist/*

  docker:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/az-migrate-dep-visu"
          docker build -t $IMAGE_NAME:latest .
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            TAG=${GITHUB_REF#refs/tags/}
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$TAG
            echo "pushing docker tag $TAG"
            docker push $IMAGE_NAME:$TAG
          fi
          docker push $IMAGE_NAME:latest
